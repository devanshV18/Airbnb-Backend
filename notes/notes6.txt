TOMBSTONE IN DATABASES.

Tombstone is nothing but soft deletion or pretending to delete something, Lets take up the example of our api deletion of hotels by id.

M1 -> add a new field to the hotels table as isActive or isDeleted and the default value of this attribute is marked null. Whenever we want to delete a hotelbyid, we can mark the isDeleted attribute of that hotel as true.

M2 -> add a deletedAt attribute and have the default value as NULL, whenever we want to delete a hotel, we can mark the deletedAt attribute of that hotel with the deletion timestamp, if any hotel has deletedAt attribute as NULL, it means the hotel is not deleted and if the attribute is having a timestamp, it means it has been deleted (soft) also giving us an additional info about when the hotel was deleted.

### Sequelize ORM provides us the M2 inbuilt using Paranoi :- Sequelize supports the concept of paranoid tables. A paranoid table is one that, when told to delete a record, it will not truly delete it. Instead, a special column called deletedAt will have its value set to the timestamp of that deletion request.

To make a model paranoid, you must pass the paranoid: true option to the model definition. Paranoid requires timestamps to work (i.e. it won't work if you also pass timestamps: false).

You can also change the default column name (which is deletedAt) to something else.

example : -

class Post extends Model {}
Post.init(
  {
    /* attributes here */
  },
  {
    sequelize,
    paranoid: true,

    // If you want to give a custom name to the deletedAt column
    deletedAt: 'destroyTime',
  },
);

Manual Implementation Steps:-
1. adding migration 
2. complete code in migration file and migrate it
3. update the model file accordingly