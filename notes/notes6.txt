TOMBSTONE IN DATABASES.

Tombstone is nothing but soft deletion or pretending to delete something, Lets take up the example of our api deletion of hotels by id.

M1 -> add a new field to the hotels table as isActive or isDeleted and the default value of this attribute is marked null. Whenever we want to delete a hotelbyid, we can mark the isDeleted attribute of that hotel as true.

M2 -> add a deletedAt attribute and have the default value as NULL, whenever we want to delete a hotel, we can mark the deletedAt attribute of that hotel with the deletion timestamp, if any hotel has deletedAt attribute as NULL, it means the hotel is not deleted and if the attribute is having a timestamp, it means it has been deleted (soft) also giving us an additional info about when the hotel was deleted.

### Sequelize ORM provides us the M2 inbuilt using Paranoi :- Sequelize supports the concept of paranoid tables. A paranoid table is one that, when told to delete a record, it will not truly delete it. Instead, a special column called deletedAt will have its value set to the timestamp of that deletion request.

To make a model paranoid, you must pass the paranoid: true option to the model definition. Paranoid requires timestamps to work (i.e. it won't work if you also pass timestamps: false).

You can also change the default column name (which is deletedAt) to something else.

example : -

class Post extends Model {}
Post.init(
  {
    /* attributes here */
  },
  {
    sequelize,
    paranoid: true,

    // If you want to give a custom name to the deletedAt column
    deletedAt: 'destroyTime',
  },
);


VVVVIII -> whenever we perform soft delete, we need to understand that the inbuilt on delete cascade feature of mysql wont perfrom its task for dependent tables. for example if we originally deleted a hotel by removing the record of a hotel, in all dependent tables where that hotel might have been used by using the PK i.e. hotelid, all those records would also get deleted automatically. But now since we are marking a field to perfrom soft delete, all the dependent deletions will also be handled by us manually if our ORM doesn't provide a good dependency support.


Manual Implementation Steps:-
1. adding migration 
2. complete code in migration file and migrate it
3. update the model file accordingly
4. write repository level logic in softDelte fxn also edit getAllhotels fxn by adding where deletedAt : null to get only not soft deleted hotels.
5. subsequently compelte other layers.


In DB there is a concept called triggers related to stored procedure.

stored procedure -> just as we have a function/method in programming languages, the same for DB is called stored procedures.

Triggers -> Those kind of life cycle event, if something happens to the data in the db (event) based on that happening, we can perfrom any operation just before of after the occurence of that event.

ex- a trigger before something is inserted in the db: we can trigger or invoke a stored procedure(any logic pre written )attached to the trigger. just before any insetion occurs, <--- just an example scenario

Hooks: hooks is same as triggers in ORMs like mongoose or sequelize. Hence hooks are nothing but functions which can be called before or after any sequelize call (event) In Sequelize hooks can only be used with models not instances.